// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    // Put your code here:

    Or(a=reset, b=load, out=resetOrLoad);
    Or(a=resetOrLoad, b=inc, out=registerLoad); // registerLoad = reset or load or inc

    Inc16(in=prevOut, out=incOut);

    // the `a` parameter can be any 16 bit value e.g 0000... 0011... 01100.... This is because outMux = a iff reset, load and inc are false.
    // If they are false, registerLoad will be false and the the `in` parameter in Register is ignored
    Mux8Way16(a=false, b=incOut, c=in, d=in, e=false, f=false, g=false, h=false, sel[2]=reset, sel[1]=load, sel[0]=inc, out=outMux);
    Register(in=outMux, load=registerLoad, out=out, out=prevOut);
}
