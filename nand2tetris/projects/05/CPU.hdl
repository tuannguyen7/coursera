// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    Not(in=instruction[15], out=notOpcode); // Not Opcode: 1 - A instruction, 0 - C instruction
    Not(in=instruction[3], out=notD4);
    Not(in=instruction[4], out=notD3);

    Mux16(a=instruction, b=ALUOutput, sel=instruction[15], out=aAddress);

    // loadARegister = 1 if the instruction is A instruction OR dest=A (C instruction)
    // instruction[5] = 1 => dest contains A register
    And(a=instruction[15], b=instruction[5], out=destContainA);
    Or(a=notOpcode, b=destContainA, out=loadARegister); // computue the load of A register
    ARegister(in=aAddress, load=loadARegister, out[0..14]=addressM, out=outRegisterA); // A register
    Mux16(a=outRegisterA, b=inM, sel=instruction[12], out=yALUInput);

    // D register
    // loadDRegister = 1 if the instruction is C instruction AND dest contains D
    And(a=instruction[15], b=instruction[4], out=loadDRegister);
    DRegister(in=ALUOutput, load=loadDRegister, out=outRegisterD); // D register

    ALU(x=outRegisterD, y=yALUInput, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUOutput, out=outM, ng=ng, zr=zr);

    // Jump
    Not(in=ng, out=nNG);
    Not(in=zr, out=nZR);
    And(a=nNG, b=nZR, out=po); // positive

    And(a=instruction[0], b=po, out=jumpPositive);
    And(a=instruction[1], b=zr, out=jumpZero);
    And(a=instruction[2], b=ng, out=jumpNegative);

    Or(a=jumpPositive, b=jumpZero, out=tmpJump);
    Or(a=tmpJump, b=jumpNegative, out=jumpCondHold);
    And(a=instruction[15], b=jumpCondHold, out=shouldJump); // C instruction and jump conditions are satisified
    Not(in=shouldJump, out=shouldNotJump);

    // PC
    PC(in=outRegisterA, load=shouldJump, inc=shouldNotJump, reset=reset, out[0..14]=pc);

    // writeM if C instruction and dest contains M
    And(a=instruction[15], b=instruction[3], out=writeM);
}
